<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://goatmobile.github.io/blog/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://goatmobile.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Live Reloading HTML from Scratch Again</title>
      <link>https://goatmobile.github.io/blog/posts/live-reload2/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/live-reload2/</guid>
      <description>As a follow on to the original Live Reloading HTML from Scratch post, adding the &amp;lt;script&amp;gt; tag to include the websocket server to each client HTML page turned out to be a little tedious. Most frameworks don&amp;rsquo;t require this either, they just insert the relevant JavaScript into the page before they ship it off to complete the request. Python&amp;rsquo;s HTTP server is pretty easy to extend to do this same thing:</description>
    </item>
    
    <item>
      <title>`apylaas`: Any Python Library As A Service</title>
      <link>https://goatmobile.github.io/blog/posts/apylaas/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/apylaas/</guid>
      <description>Recently I found myself wanting to run a short shell script from my home server through my phone for some automation tasks. This is certainly possible with existing tools but I figured it&amp;rsquo;d be nice to make it so any code I could possibly want could be easily wrapped up into a simple web UI. apylaas is the result, a Python package to turn existing Python modules into a JSON API controllable through a webpage.</description>
    </item>
    
    <item>
      <title>A Proper Python Logger</title>
      <link>https://goatmobile.github.io/blog/posts/python-logging/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/python-logging/</guid>
      <description>Why yes, that is 60 lines just to initialize a reasonable logger in Python.
import logging import sys from typing import Optional from pathlib import Path # Set to the git or project level root ROOT = Path(__file__).resolve().parent LOG = None class FilterRelativePath(logging.Filter): &amp;#34;&amp;#34;&amp;#34; Logging filter to make paths relative to a fixed root folder &amp;#34;&amp;#34;&amp;#34; def filter(self, record): path = Path(record.pathname).resolve() record.relativepath = str(path.relative_to(ROOT)) return True def init_logger( name: Optional[str] = None, time: bool = True, filename: bool = True ) -&amp;gt; logging.</description>
    </item>
    
    <item>
      <title>Running Self-Hosted Services Locally with HTTPS</title>
      <link>https://goatmobile.github.io/blog/posts/self-hosted/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/self-hosted/</guid>
      <description>With Docker and friends it&amp;rsquo;s getting pretty easy to run complex software on your local network for private use. For example to download and run Grafana all you have to do is:
sudo apt update sudo apt install -y docker.io sudo docker run -d -p 3000:3000 --name grafana grafana/grafana This will put the service up at localhost:3000 on the server, then to access this from somewhere else you need to set up an SSH tunnel:</description>
    </item>
    
    <item>
      <title>Live Reloading HTML from Scratch</title>
      <link>https://goatmobile.github.io/blog/posts/live-reload/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/live-reload/</guid>
      <description>Any frontend toolkit worth its weight in node_modules today will have some kind of live reloading functionality (e.g. livereload or live-server for basic examples) where it watches files on disk for changes and automatically reloads changes in the browser. CodeKit is a cool (proprietary) example that even has hot-reloading for CSS only changes so the browser doesn&amp;rsquo;t lose any actual state. Most of these tools work by injecting JavaScript magic into your input HTML and communicating over a websocket server to a process on the server that watches the actual files.</description>
    </item>
    
    <item>
      <title>rfile Command Runner</title>
      <link>https://goatmobile.github.io/blog/posts/rfile/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/rfile/</guid>
      <description>I recently found myself needing to run some terminal commands on my computer while working on a web project. What a conundrum! Several days later out popped rfile, a cool command runner that makes keeping track of projects a breeze.
My previous go-to for a project was to lump all the common tasks I needed to do (essentially a collection of short Bash scripts) into a Makefile and control things via environment variables.</description>
    </item>
    
    <item>
      <title>Terminal Spotlight: Part 2</title>
      <link>https://goatmobile.github.io/blog/posts/mini-term2/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/mini-term2/</guid>
      <description>I found that startup time with Automator and a MacOS Service keyboard shortcut leads to pretty high start up latency (1-3 seconds-ish) that&amp;rsquo;s mostly outside of the terminal&amp;rsquo;s control. The obvious next step was to spend several hours futzing with Alacritty&amp;rsquo;s Rust codebase to hack in a global keyboard shortcut listener to cut out the Automator middleman.
The listening was relatively simple with the rdev create. My Alacritty fork has the changes and building it is pretty straightforward.</description>
    </item>
    
    <item>
      <title>Tricky Pickle</title>
      <link>https://goatmobile.github.io/blog/posts/pickle/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/pickle/</guid>
      <description>Everybody knows Python&amp;rsquo;s pickle module has prickly edges, just like a real pickle. The documentation even has a big red box right at the top. The pickle file format is technically a program for the pickle stack machine, nicely described in Lib/pickletools.py. Briefly, instructions (opcodes) create Python primitives (ints, strs, tuples, etc.) on a stack. Some extra bits are used to:
 preserve object references across serialization (e.g. if you save a list containing the same object twice, it will be deserialized into the same list rather than a list with two different objects with the same values) de-duplicate references via a memoization table (an array of already-deserialized objects) run custom deserialization code on objects  Let&amp;rsquo;s take a quick look inside a pickle using the pickletools standard library module.</description>
    </item>
    
    <item>
      <title>Maintaining SSH Connections</title>
      <link>https://goatmobile.github.io/blog/posts/ssh/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/ssh/</guid>
      <description>If you don&amp;rsquo;t like your computer to make sounds like beeping or fan spinning, you&amp;rsquo;re probably using a remote server to do development. And nothing says &amp;ldquo;remote development&amp;rdquo; more than SSH. Connecting is easy enough:
ssh my_cool_server.com This works fine until you need to open another connection or you close your laptop. Thankfully there are some easy ways to make SSH connections live longer than they would otherwise.
ControlPersist SSH has an option where it will persist a connection to a file (a socket) that can be used multiple times.</description>
    </item>
    
    <item>
      <title>Terminal Spotlight</title>
      <link>https://goatmobile.github.io/blog/posts/spotlight/</link>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/spotlight/</guid>
      <description>I do my daily driving from MacOS. One of the great things about MacOS is Spotlight. It&amp;rsquo;s like a little secret menu that can do really neat things like open a program or add 2 numbers. Secret because no one who doesn&amp;rsquo;t already know about it is going to find out. Sure you can click the little magnifying glass in the top bar but no one&amp;rsquo;s doing that, all the other icons too much more clickable to bother.</description>
    </item>
    
    <item>
      <title>Installing Debian</title>
      <link>https://goatmobile.github.io/blog/posts/debian/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/debian/</guid>
      <description>This guide goes over my experience installing Debian 11 alongside Windows 10. Out of the common Linux distros, Ubuntu is out due to Canonical&amp;rsquo;s including of non-free software by default and the whole debacle around snaps. For a quick TL;DR: snaps follow a similar theme to Docker images or static builds in that they include the world alongside their package to avoid any &amp;ldquo;this distro is missing mycoollibrary.so.123 so my software doesn&amp;rsquo;t run!</description>
    </item>
    
    <item>
      <title>Cloning ping from Scratch</title>
      <link>https://goatmobile.github.io/blog/posts/ping-clone/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/ping-clone/</guid>
      <description>The ping utility found on many systems is typically a simple tool to determine if 2 computers can see each other on a network. It&amp;rsquo;s been around in some form or another for nearly 40 years and is dead simple to use: ping &amp;lt;somewhere&amp;gt;. Some other tools can gussy up the output a bit but the fundamentals are the same.
$ ping google.com PING google.com (172.217.6.46) 56(84) bytes of data. 64 bytes from sfo03s08-in-f46.</description>
    </item>
    
    <item>
      <title>Cloning traceroute from Scratch</title>
      <link>https://goatmobile.github.io/blog/posts/traceroute-clone/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/traceroute-clone/</guid>
      <description>traceroute is a cool little tool that lets you see how your network packets travel through the network. If you&amp;rsquo;ve ever heard anyone talk about &amp;ldquo;network hops&amp;rdquo;, traceroute will show you exactly what these hops are (well, if it can). A basic implementation is super simple and relies on the definition of a TTL (time-to-live). Each packet in the network has a time-to-live associated with it, in practice it&amp;rsquo;s simply a number that increments on each network hop.</description>
    </item>
    
    <item>
      <title>Jupyter Notebooks and Hugo</title>
      <link>https://goatmobile.github.io/blog/posts/jupyter-hugo/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/jupyter-hugo/</guid>
      <description>Jupyter is a super nice environment for doing literate programming and as such it&amp;rsquo;s a natural choice for writing code-heavy articles. I&amp;rsquo;ve set up several blogs with Hugo which is nice to write in but only understand markdown by default, but thanks to nbconvert it&amp;rsquo;s pretty easy to get the two working together.
Inside each notebook I include the Hugo front matter in the first markdown cell inside a markdown code block.</description>
    </item>
    
    <item>
      <title>Multiple GitHub Users on a Single Machine</title>
      <link>https://goatmobile.github.io/blog/posts/multiple-git-users/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/multiple-git-users/</guid>
      <description>Generate a key.
# Give your keys a special name! For this example it&amp;#39;s &amp;#39;my_cool_key&amp;#39; ssh-keygen -t ed25519 -N &amp;#34;&amp;#34; -C &amp;#34;my key&amp;#39;s name&amp;#34; -f ~/.ssh/my_cool_key   Copy it to whatever GitHub account it should be on.
cat ~/.ssh/my_cool_key.pub   Go to your repository and do some pushes! Use GIT_SSH_COMMAND to tell it to use the key we just generated.
GIT_SSH_COMMAND=&amp;#39;ssh -i ~/.ssh/my_cool_key -o IdentitiesOnly=yes&amp;#39; \  git push   Wow!</description>
    </item>
    
    <item>
      <title>Scalar Autodiff From Scratch</title>
      <link>https://goatmobile.github.io/blog/posts/scalar-autodiff/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://goatmobile.github.io/blog/posts/scalar-autodiff/</guid>
      <description>Automatic differentiation (or autodiff) underlies many modern machine learning frameworks and mathematical models. This post demonstrates a from-scratch implemention on scalar values (in contrast to tensors a.k.a. ndarrays that are common in machine learning) and shows how we can use it to implement gradient descent, eventually learning some linear function (i.e. a function looks like y = m * x + b). Rest assured the explanations here are much more complicated than the code itself.</description>
    </item>
    
  </channel>
</rss>
